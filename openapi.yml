openapi: 3.0.3
info:
  title: スケジュール管理API
  description: |
    スケジュール、カテゴリ、案件、お知らせなどを管理するためのAPI仕様です。
    このAPIを使用することで、ユーザーは自分のスケジュールを効率的に管理し、
    案件情報を記録・追跡することができます。
  version: 1.0.0
  contact:
    name: API Support
    email: support@schedule-api.example.com

servers:
  - url: https://api.schedule-app.example.com/v1
    description: 本番環境
  - url: https://staging-api.schedule-app.example.com/v1
    description: ステージング環境
  - url: http://localhost:3000/v1
    description: 開発環境

tags:
  - name: auth
    description: 認証・アカウント管理
  - name: users
    description: ユーザー管理
  - name: user-settings
    description: ユーザー設定管理
  - name: books
    description: スケジュール帳管理
  - name: categories
    description: カテゴリ管理
  - name: subcategories
    description: サブカテゴリ管理
  - name: schedules
    description: スケジュール管理
  - name: works
    description: 案件管理
  - name: notices
    description: お知らせ管理
  - name: statistics
    description: 統計情報
  - name: resume
    description: 職務経歴書

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    # 共通のレスポンスモデル
    Error:
      type: object
      properties:
        code:
          type: integer
          description: エラーコード
        message:
          type: string
          description: エラーメッセージ
        details:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
                description: エラーが発生したフィールド
              message:
                type: string
                description: フィールド固有のエラーメッセージ
      required:
        - code
        - message

    PaginationMeta:
      type: object
      properties:
        totalItems:
          type: integer
          description: 合計アイテム数
        itemsPerPage:
          type: integer
          description: ページあたりのアイテム数
        currentPage:
          type: integer
          description: 現在のページ番号
        totalPages:
          type: integer
          description: 合計ページ数
      required:
        - totalItems
        - itemsPerPage
        - currentPage
        - totalPages

    # 認証関連
    UserCredentials:
      type: object
      properties:
        email:
          type: string
          format: email
          description: ユーザーのメールアドレス
        password:
          type: string
          format: password
          description: パスワード
      required:
        - email
        - password

    UserSignup:
      type: object
      properties:
        username:
          type: string
          description: ユーザー名
        email:
          type: string
          format: email
          description: メールアドレス
        password:
          type: string
          format: password
          description: パスワード
      required:
        - username
        - email
        - password

    AuthResponse:
      type: object
      properties:
        token:
          type: string
          description: JWT認証トークン
        refreshToken:
          type: string
          description: リフレッシュトークン
        expiresIn:
          type: integer
          description: トークンの有効期限（秒）
        user:
          $ref: '#/components/schemas/UserBasic'
      required:
        - token
        - refreshToken
        - expiresIn
        - user

    # ユーザー関連
    UserBasic:
      type: object
      properties:
        id:
          type: integer
          description: ユーザーID
        username:
          type: string
          description: ユーザー名
        email:
          type: string
          format: email
          description: メールアドレス
      required:
        - id
        - username
        - email

    User:
      allOf:
        - $ref: '#/components/schemas/UserBasic'
        - type: object
          properties:
            delFlg:
              type: boolean
              description: 削除フラグ
            updateCnt:
              type: integer
              description: 更新カウント
            updateTime:
              type: string
              format: date-time
              description: 更新日時
            updateUserId:
              type: integer
              description: 更新者ID
            createTime:
              type: string
              format: date-time
              description: 作成日時
            createUserId:
              type: integer
              description: 作成者ID
          required:
            - delFlg
            - updateCnt
            - updateTime
            - createTime

    UserUpdateInput:
      type: object
      properties:
        username:
          type: string
          description: ユーザー名
        email:
          type: string
          format: email
          description: メールアドレス
        password:
          type: string
          format: password
          description: パスワード（変更する場合のみ）

    # ユーザー設定関連
    UserSetting:
      type: object
      properties:
        id:
          type: integer
          description: ユーザー設定ID
        userId:
          type: integer
          description: ユーザーID
        # 必要な設定項目を追加
        delFlg:
          type: boolean
          description: 削除フラグ
        updateCnt:
          type: integer
          description: 更新カウント
        updateTime:
          type: string
          format: date-time
          description: 更新日時
        updateUserId:
          type: integer
          description: 更新者ID
        createTime:
          type: string
          format: date-time
          description: 作成日時
        createUserId:
          type: integer
          description: 作成者ID
      required:
        - id
        - userId
        - delFlg
        - updateCnt
        - updateTime
        - createTime

    UserSettingInput:
      type: object
      properties:
        # 必要な設定項目を追加
        theme:
          type: string
          description: テーマ設定
        notificationEnabled:
          type: boolean
          description: 通知設定
        language:
          type: string
          description: 言語設定

    # スケジュール帳関連
    Book:
      type: object
      properties:
        id:
          type: integer
          description: スケジュール帳ID
        userId:
          type: integer
          description: ユーザーID
        delFlg:
          type: boolean
          description: 削除フラグ
        updateCnt:
          type: integer
          description: 更新カウント
        updateTime:
          type: string
          format: date-time
          description: 更新日時
        updateUserId:
          type: integer
          description: 更新者ID
        createTime:
          type: string
          format: date-time
          description: 作成日時
        createUserId:
          type: integer
          description: 作成者ID
      required:
        - id
        - userId
        - delFlg
        - updateCnt
        - updateTime
        - createTime

    BookInput:
      type: object
      properties:
        name:
          type: string
          description: スケジュール帳名
      required:
        - name

    # カテゴリ関連
    Category:
      type: object
      properties:
        id:
          type: integer
          description: カテゴリID
        bookId:
          type: integer
          description: スケジュール帳ID
        categoryName:
          type: string
          description: カテゴリ名
        incomeFlg:
          type: boolean
          description: 収入フラグ
        delFlg:
          type: boolean
          description: 削除フラグ
        updateCnt:
          type: integer
          description: 更新カウント
        updateTime:
          type: string
          format: date-time
          description: 更新日時
        updateUserId:
          type: integer
          description: 更新者ID
        createTime:
          type: string
          format: date-time
          description: 作成日時
        createUserId:
          type: integer
          description: 作成者ID
      required:
        - id
        - bookId
        - categoryName
        - incomeFlg
        - delFlg
        - updateCnt
        - updateTime
        - createTime

    CategoryInput:
      type: object
      properties:
        categoryName:
          type: string
          description: カテゴリ名
        incomeFlg:
          type: boolean
          description: 収入フラグ
      required:
        - categoryName
        - incomeFlg

    # サブカテゴリ関連
    Subcategory:
      type: object
      properties:
        id:
          type: integer
          description: サブカテゴリID
        categoryId:
          type: integer
          description: カテゴリID
        subcategoryName:
          type: string
          description: サブカテゴリ名
        delFlg:
          type: boolean
          description: 削除フラグ
        updateCnt:
          type: integer
          description: 更新カウント
        updateTime:
          type: string
          format: date-time
          description: 更新日時
        updateUserId:
          type: integer
          description: 更新者ID
        createTime:
          type: string
          format: date-time
          description: 作成日時
        createUserId:
          type: integer
          description: 作成者ID
      required:
        - id
        - categoryId
        - subcategoryName
        - delFlg
        - updateCnt
        - updateTime
        - createTime

    SubcategoryInput:
      type: object
      properties:
        subcategoryName:
          type: string
          description: サブカテゴリ名
      required:
        - subcategoryName

    # スケジュール関連
    Schedule:
      type: object
      properties:
        id:
          type: integer
          description: スケジュールID
        bookId:
          type: integer
          description: スケジュール帳ID
        categoryId:
          type: integer
          description: カテゴリID
        subcategoryId:
          type: integer
          description: サブカテゴリID
        startTime:
          type: string
          format: date-time
          description: 開始日時
        endTime:
          type: string
          format: date-time
          description: 終了日時
        title:
          type: string
          description: タイトル
        remarks:
          type: string
          description: 備考
        delFlg:
          type: boolean
          description: 削除フラグ
        updateCnt:
          type: integer
          description: 更新カウント
        updateTime:
          type: string
          format: date-time
          description: 更新日時
        updateUserId:
          type: integer
          description: 更新者ID
        createTime:
          type: string
          format: date-time
          description: 作成日時
        createUserId:
          type: integer
          description: 作成者ID
      required:
        - id
        - bookId
        - startTime
        - endTime
        - title
        - delFlg
        - updateCnt
        - updateTime
        - createTime

    ScheduleInput:
      type: object
      properties:
        categoryId:
          type: integer
          description: カテゴリID
        subcategoryId:
          type: integer
          description: サブカテゴリID
        startTime:
          type: string
          format: date-time
          description: 開始日時
        endTime:
          type: string
          format: date-time
          description: 終了日時
        title:
          type: string
          description: タイトル
        remarks:
          type: string
          description: 備考
      required:
        - startTime
        - endTime
        - title

    # 案件関連
    Work:
      type: object
      properties:
        id:
          type: integer
          description: 案件ID
        bookId:
          type: integer
          description: スケジュール帳ID
        workName:
          type: string
          description: 案件名
        hourlyPay:
          type: number
          format: float
          description: 時給
        unitPrice:
          type: number
          format: float
          description: 単価
        company:
          type: string
          description: 会社名
        agent:
          type: string
          description: エージェント
        remarks:
          type: string
          description: 備考
        delFlg:
          type: boolean
          description: 削除フラグ
        updateCnt:
          type: integer
          description: 更新カウント
        updateTime:
          type: string
          format: date-time
          description: 更新日時
        updateUserId:
          type: integer
          description: 更新者ID
        createTime:
          type: string
          format: date-time
          description: 作成日時
        createUserId:
          type: integer
          description: 作成者ID
      required:
        - id
        - bookId
        - workName
        - company
        - delFlg
        - updateCnt
        - updateTime
        - createTime

    WorkInput:
      type: object
      properties:
        workName:
          type: string
          description: 案件名
        hourlyPay:
          type: number
          format: float
          description: 時給
        unitPrice:
          type: number
          format: float
          description: 単価
        company:
          type: string
          description: 会社名
        agent:
          type: string
          description: エージェント
        remarks:
          type: string
          description: 備考
      required:
        - workName
        - company

    # お知らせ関連
    Notice:
      type: object
      properties:
        id:
          type: integer
          description: お知らせID
        bookId:
          type: integer
          description: スケジュール帳ID
        disUserId:
          type: integer
          description: 表示ユーザーID
        disRole:
          type: string
          description: 表示権限
        date:
          type: string
          format: date
          description: 日付
        delDate:
          type: string
          format: date
          description: 削除日
        remarks:
          type: string
          description: 備考
        delFlg:
          type: boolean
          description: 削除フラグ
        updateCnt:
          type: integer
          description: 更新カウント
        updateTime:
          type: string
          format: date-time
          description: 更新日時
        updateUserId:
          type: integer
          description: 更新者ID
        createTime:
          type: string
          format: date-time
          description: 作成日時
        createUserId:
          type: integer
          description: 作成者ID
      required:
        - id
        - bookId
        - date
        - delFlg
        - updateCnt
        - updateTime
        - createTime

    NoticeInput:
      type: object
      properties:
        disUserId:
          type: integer
          description: 表示ユーザーID
        disRole:
          type: string
          description: 表示権限
        date:
          type: string
          format: date
          description: 日付
        remarks:
          type: string
          description: 備考
      required:
        - date

    NoticeRead:
      type: object
      properties:
        id:
          type: integer
          description: お知らせ通知ID
        noticeId:
          type: integer
          description: お知らせID
        userId:
          type: integer
          description: ユーザーID
        delFlg:
          type: boolean
          description: 削除フラグ
        updateCnt:
          type: integer
          description: 更新カウント
        updateTime:
          type: string
          format: date-time
          description: 更新日時
        updateUserId:
          type: integer
          description: 更新者ID
        createTime:
          type: string
          format: date-time
          description: 作成日時
        createUserId:
          type: integer
          description: 作成者ID
      required:
        - id
        - noticeId
        - userId
        - delFlg
        - updateCnt
        - updateTime
        - createTime

    # 統計情報関連
    StatisticsResponse:
      type: object
      properties:
        totalSchedules:
          type: integer
          description: 総スケジュール数
        totalCategories:
          type: integer
          description: 総カテゴリ数
        totalWorks:
          type: integer
          description: 総案件数
        incomeStats:
          type: object
          properties:
            totalIncome:
              type: number
              format: float
              description: 総収入
            averageIncome:
              type: number
              format: float
              description: 平均収入
        scheduleDistribution:
          type: object
          additionalProperties:
            type: integer
          description: カテゴリ別スケジュール分布
        monthlyStats:
          type: array
          items:
            type: object
            properties:
              month:
                type: string
                description: 月（YYYY-MM形式）
              scheduleCount:
                type: integer
                description: スケジュール数
              income:
                type: number
                format: float
                description: 収入

    # 職務経歴書関連
    ResumeResponse:
      type: object
      properties:
        userId:
          type: integer
          description: ユーザーID
        userName:
          type: string
          description: ユーザー名
        works:
          type: array
          items:
            $ref: '#/components/schemas/Work'
        totalExperience:
          type: object
          properties:
            years:
              type: integer
              description: 経験年数
            months:
              type: integer
              description: 経験月数
        skills:
          type: array
          items:
            type: string
          description: スキル一覧

  responses:
    UnauthorizedError:
      description: 認証エラー
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    
    ForbiddenError:
      description: アクセス権限がありません
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    
    NotFoundError:
      description: リソースが見つかりません
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    
    BadRequestError:
      description: 不正なリクエスト
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    
    ServerError:
      description: サーバーエラー
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    
    NoContent:
      description: 正常に処理されました（コンテンツなし）
    
    ConflictError:
      description: リソースの競合が発生しました
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    
    ValidationError:
      description: 入力値の検証エラー
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

paths:
  # 認証関連エンドポイント
  /auth/signup:
    post:
      tags:
        - auth
      summary: ユーザー登録
      description: 新規ユーザーを登録します
      operationId: signUp
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserSignup'
      responses:
        '201':
          description: ユーザー登録成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '409':
          $ref: '#/components/responses/ConflictError'
        '500':
          $ref: '#/components/responses/ServerError'

  /auth/signin:
    post:
      tags:
        - auth
      summary: ログイン
      description: 登録済みユーザーのログイン認証
      operationId: signIn
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCredentials'
      responses:
        '200':
          description: ログイン成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/ServerError'

  /auth/refresh-token:
    post:
      tags:
        - auth
      summary: トークンの更新
      description: リフレッシュトークンを使用して新しいアクセストークンを取得
      operationId: refreshToken
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refreshToken:
                  type: string
                  description: リフレッシュトークン
              required:
                - refreshToken
      responses:
        '200':
          description: トークン更新成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/ServerError'

  /auth/signout:
    post:
      tags:
        - auth
      summary: ログアウト
      description: ユーザーのログアウト処理
      operationId: signOut
      security:
        - bearerAuth: []
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/ServerError'

  # ユーザー関連エンドポイント
  /users/me:
    get:
      tags:
        - users
      summary: 自分のユーザー情報取得
      description: ログインユーザー自身の情報を取得します
      operationId: getMyUserInfo
      security:
        - bearerAuth: []
      responses:
        '200':
          description: ユーザー情報取得成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/ServerError'
    
    put:
      tags:
        - users
      summary: 自分のユーザー情報更新
      description: ログインユーザー自身の情報を更新します
      operationId: updateMyUserInfo
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdateInput'
      responses:
        '200':
          description: ユーザー情報更新成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/ServerError'

  # ユーザー設定関連エンドポイント
  /user-settings:
    get:
      tags:
        - user-settings
      summary: ユーザー設定取得
      description: ログインユーザーの設定情報を取得します
      operationId: getUserSettings
      security:
        - bearerAuth: []
      responses:
        '200':
          description: ユーザー設定取得成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSetting'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/ServerError'
    
    put:
      tags:
        - user-settings
      summary: ユーザー設定更新
      description: ログインユーザーの設定情報を更新します
      operationId: updateUserSettings
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserSettingInput'
      responses:
        '200':
          description: ユーザー設定更新成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSetting'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/ServerError'

  # スケジュール帳関連エンドポイント
  /books:
    get:
      tags:
        - books
      summary: スケジュール帳一覧取得
      description: ログインユーザーのスケジュール帳一覧を取得します
      operationId: getBooks
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          description: ページ番号
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          description: 1ページあたりの件数
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: スケジュール帳一覧取得成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Book'
                  meta:
                    $ref: '#/components/schemas/PaginationMeta'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/ServerError'
    
    post:
      tags:
        - books
      summary: スケジュール帳作成
      description: 新しいスケジュール帳を作成します
      operationId: createBook
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookInput'
      responses:
        '201':
          description: スケジュール帳作成成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/ServerError'

  /books/{bookId}:
    parameters:
      - name: bookId
        in: path
        required: true
        description: スケジュール帳ID
        schema:
          type: integer
    
    get:
      tags:
        - books
      summary: スケジュール帳詳細取得
      description: 指定されたIDのスケジュール帳詳細を取得します
      operationId: getBookById
      security:
        - bearerAuth: []
      responses:
        '200':
          description: スケジュール帳詳細取得成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/ServerError'
    
    put:
      tags:
        - books
      summary: スケジュール帳更新
      description: 指定されたIDのスケジュール帳を更新します
      operationId: updateBook
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookInput'
      responses:
        '200':
          description: スケジュール帳更新成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/ServerError'
    
    delete:
      tags:
        - books
      summary: スケジュール帳削除
      description: 指定されたIDのスケジュール帳を削除します
      operationId: deleteBook
      security:
        - bearerAuth: []
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/ServerError'

  # カテゴリ関連エンドポイント
  /books/{bookId}/categories:
    parameters:
      - name: bookId
        in: path
        required: true
        description: スケジュール帳ID
        schema:
          type: integer
    
    get:
      tags:
        - categories
      summary: カテゴリ一覧取得
      description: 指定されたスケジュール帳のカテゴリ一覧を取得します
      operationId: getCategories
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          description: ページ番号
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          description: 1ページあたりの件数
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: カテゴリ一覧取得成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Category'
                  meta:
                    $ref: '#/components/schemas/PaginationMeta'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/ServerError'
    
    post:
      tags:
        - categories
      summary: カテゴリ作成
      description: 指定されたスケジュール帳に新しいカテゴリを作成します
      operationId: createCategory
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryInput'
      responses:
        '201':
          description: カテゴリ作成成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '500':
          $ref: '#/components/responses/ServerError'

  /books/{bookId}/categories/{categoryId}:
    parameters:
      - name: bookId
        in: path
        required: true
        description: スケジュール帳ID
        schema:
          type: integer
      - name: categoryId
        in: path
        required: true
        description: カテゴリID
        schema:
          type: integer
    
    get:
      tags:
        - categories
      summary: カテゴリ詳細取得
      description: 指定されたIDのカテゴリ詳細を取得します
      operationId: getCategoryById
      security:
        - bearerAuth: []
      responses:
        '200':
          description: カテゴリ詳細取得成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/ServerError'
    
    put:
      tags:
        - categories
      summary: カテゴリ更新
      description: 指定されたIDのカテゴリを更新します
      operationId: updateCategory
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryInput'
      responses:
        '200':
          description: カテゴリ更新成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/ServerError'
    
    delete:
      tags:
        - categories
      summary: カテゴリ削除
      description: 指定されたIDのカテゴリを削除します
      operationId: deleteCategory
      security:
        - bearerAuth: []
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/ServerError'

  # サブカテゴリ関連エンドポイント
  /books/{bookId}/categories/{categoryId}/subcategories:
    parameters:
      - name: bookId
        in: path
        required: true
        description: スケジュール帳ID
        schema:
          type: integer
      - name: categoryId
        in: path
        required: true
        description: カテゴリID
        schema:
          type: integer
    
    get:
      tags:
        - subcategories
      summary: サブカテゴリ一覧取得
      description: 指定されたカテゴリのサブカテゴリ一覧を取得します
      operationId: getSubcategories
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          description: ページ番号
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          description: 1ページあたりの件数
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: サブカテゴリ一覧取得成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Subcategory'
                  meta:
                    $ref: '#/components/schemas/PaginationMeta'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/ServerError'
    
    post:
      tags:
        - subcategories
      summary: サブカテゴリ作成
      description: 指定されたカテゴリに新しいサブカテゴリを作成します
      operationId: createSubcategory
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubcategoryInput'
      responses:
        '201':
          description: サブカテゴリ作成成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subcategory'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '500':
          $ref: '#/components/responses/ServerError'

  /books/{bookId}/categories/{categoryId}/subcategories/{subcategoryId}:
    parameters:
      - name: bookId
        in: path
        required: true
        description: スケジュール帳ID
        schema:
          type: integer
      - name: categoryId
        in: path
        required: true
        description: カテゴリID
        schema:
          type: integer
      - name: subcategoryId
        in: path
        required: true
        description: サブカテゴリID
        schema:
          type: integer
    
    get:
      tags:
        - subcategories
      summary: サブカテゴリ詳細取得
      description: 指定されたIDのサブカテゴリ詳細を取得します
      operationId: getSubcategoryById
      security:
        - bearerAuth: []
      responses:
        '200':
          description: サブカテゴリ詳細取得成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subcategory'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/ServerError'
    
    put:
      tags:
        - subcategories
      summary: サブカテゴリ更新
      description: 指定されたIDのサブカテゴリを更新します
      operationId: updateSubcategory
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubcategoryInput'
      responses:
        '200':
          description: サブカテゴリ更新成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subcategory'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/ServerError'
    
    delete:
      tags:
        - subcategories
      summary: サブカテゴリ削除
      description: 指定されたIDのサブカテゴリを削除します
      operationId: deleteSubcategory
      security:
        - bearerAuth: []
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/ServerError'

  # スケジュール関連エンドポイント
  /books/{bookId}/schedules:
    parameters:
      - name: bookId
        in: path
        required: true
        description: スケジュール帳ID
        schema:
          type: integer
    
    get:
      tags:
        - schedules
      summary: スケジュール一覧取得
      description: 指定されたスケジュール帳のスケジュール一覧を取得します
      operationId: getSchedules
      security:
        - bearerAuth: []
      parameters:
        - name: categoryId
          in: query
          description: カテゴリID
          schema:
            type: integer
        - name: subcategoryId
          in: query
          description: サブカテゴリID
          schema:
            type: integer
        - name: startFrom
          in: query
          description: 開始日時下限
          schema:
            type: string
            format: date-time
        - name: startTo
          in: query
          description: 開始日時上限
          schema:
            type: string
            format: date-time
        - name: endFrom
          in: query
          description: 終了日時下限
          schema:
            type: string
            format: date-time
        - name: endTo
          in: query
          description: 終了日時上限
          schema:
            type: string
            format: date-time
        - name: title
          in: query
          description: タイトル（部分一致）
          schema:
            type: string
        - name: page
          in: query
          description: ページ番号
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          description: 1ページあたりの件数
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: スケジュール一覧取得成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Schedule'
                  meta:
                    $ref: '#/components/schemas/PaginationMeta'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/ServerError'
    
    post:
      tags:
        - schedules
      summary: スケジュール作成
      description: 指定されたスケジュール帳に新しいスケジュールを作成します
      operationId: createSchedule
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScheduleInput'
      responses:
        '201':
          description: スケジュール作成成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Schedule'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '500':
          $ref: '#/components/responses/ServerError'

  /books/{bookId}/schedules/{scheduleId}:
    parameters:
      - name: bookId
        in: path
        required: true
        description: スケジュール帳ID
        schema:
          type: integer
      - name: scheduleId
        in: path
        required: true
        description: スケジュールID
        schema:
          type: integer
    
    get:
      tags:
        - schedules
      summary: スケジュール詳細取得
      description: 指定されたIDのスケジュール詳細を取得します
      operationId: getScheduleById
      security:
        - bearerAuth: []
      responses:
        '200':
          description: スケジュール詳細取得成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Schedule'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/ServerError'
    
    put:
      tags:
        - schedules
      summary: スケジュール更新
      description: 指定されたIDのスケジュールを更新します
      operationId: updateSchedule
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScheduleInput'
      responses:
        '200':
          description: スケジュール更新成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Schedule'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/ServerError'
    
    delete:
      tags:
        - schedules
      summary: スケジュール削除
      description: 指定されたIDのスケジュールを削除します
      operationId: deleteSchedule
      security:
        - bearerAuth: []
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/ServerError'

  # 案件関連エンドポイント
  /books/{bookId}/works:
    parameters:
      - name: bookId
        in: path
        required: true
        description: スケジュール帳ID
        schema:
          type: integer
    
    get:
      tags:
        - works
      summary: 案件一覧取得
      description: 指定されたスケジュール帳の案件一覧を取得します
      operationId: getWorks
      security:
        - bearerAuth: []
      parameters:
        - name: company
          in: query
          description: 会社名（部分一致）
          schema:
            type: string
        - name: agent
          in: query
          description: エージェント名（部分一致）
          schema:
            type: string
        - name: workName
          in: query
          description: 案件名（部分一致）
          schema:
            type: string
        - name: minHourlyPay
          in: query
          description: 最低時給
          schema:
            type: number
        - name: maxHourlyPay
          in: query
          description: 最高時給
          schema:
            type: number
        - name: minUnitPrice
          in: query
          description: 最低単価
          schema:
            type: number
        - name: maxUnitPrice
          in: query
          description: 最高単価
          schema:
            type: number
        - name: page
          in: query
          description: ページ番号
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          description: 1ページあたりの件数
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: 案件一覧取得成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Work'
                  meta:
                    $ref: '#/components/schemas/PaginationMeta'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/ServerError'
    
    post:
      tags:
        - works
      summary: 案件作成
      description: 指定されたスケジュール帳に新しい案件を作成します
      operationId: createWork
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WorkInput'
      responses:
        '201':
          description: 案件作成成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Work'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '500':
          $ref: '#/components/responses/ServerError'

  /books/{bookId}/works/{workId}:
    parameters:
      - name: bookId
        in: path
        required: true
        description: スケジュール帳ID
        schema:
          type: integer
      - name: workId
        in: path
        required: true
        description: 案件ID
        schema:
          type: integer
    
    get:
      tags:
        - works
      summary: 案件詳細取得
      description: 指定されたIDの案件詳細を取得します
      operationId: getWorkById
      security:
        - bearerAuth: []
      responses:
        '200':
          description: 案件詳細取得成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Work'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/ServerError'
    
    put:
      tags:
        - works
      summary: 案件更新
      description: 指定されたIDの案件を更新します
      operationId: updateWork
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WorkInput'
      responses:
        '200':
          description: 案件更新成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Work'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/ServerError'
    
    delete:
      tags:
        - works
      summary: 案件削除
      description: 指定されたIDの案件を削除します
      operationId: deleteWork
      security:
        - bearerAuth: []
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/ServerError'

  # お知らせ関連エンドポイント
  /books/{bookId}/notices:
    parameters:
      - name: bookId
        in: path
        required: true
        description: スケジュール帳ID
        schema:
          type: integer
    
    get:
      tags:
        - notices
      summary: お知らせ一覧取得
      description: 指定されたスケジュール帳のお知らせ一覧を取得します
      operationId: getNotices
      security:
        - bearerAuth: []
      parameters:
        - name: fromDate
          in: query
          description: 日付下限
          schema:
            type: string
            format: date
        - name: toDate
          in: query
          description: 日付上限
          schema:
            type: string
            format: date
        - name: unreadOnly
          in: query
          description: 未読のみ
          schema:
            type: boolean
        - name: page
          in: query
          description: ページ番号
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          description: 1ページあたりの件数
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: お知らせ一覧取得成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Notice'
                  meta:
                    $ref: '#/components/schemas/PaginationMeta'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/ServerError'
    
    post:
      tags:
        - notices
      summary: お知らせ作成
      description: 指定されたスケジュール帳に新しいお知らせを作成します
      operationId: createNotice
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NoticeInput'
      responses:
        '201':
          description: お知らせ作成成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Notice'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '500':
          $ref: '#/components/responses/ServerError'

  /books/{bookId}/notices/{noticeId}:
    parameters:
      - name: bookId
        in: path
        required: true
        description: スケジュール帳ID
        schema:
          type: integer
      - name: noticeId
        in: path
        required: true
        description: お知らせID
        schema:
          type: integer
    
    get:
      tags:
        - notices
      summary: お知らせ詳細取得
      description: 指定されたIDのお知らせ詳細を取得します
      operationId: getNoticeById
      security:
        - bearerAuth: []
      responses:
        '200':
          description: お知らせ詳細取得成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Notice'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/ServerError'
    
    put:
      tags:
        - notices
      summary: お知らせ更新
      description: 指定されたIDのお知らせを更新します
      operationId: updateNotice
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NoticeInput'
      responses:
        '200':
          description: お知らせ更新成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Notice'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/ServerError'
    
    delete:
      tags:
        - notices
      summary: お知らせ削除
      description: 指定されたIDのお知らせを削除します
      operationId: deleteNotice
      security:
        - bearerAuth: []
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/ServerError'

  /books/{bookId}/notices/{noticeId}/read:
    parameters:
      - name: bookId
        in: path
        required: true
        description: スケジュール帳ID
        schema:
          type: integer
      - name: noticeId
        in: path
        required: true
        description: お知らせID
        schema:
          type: integer
    
    post:
      tags:
        - notices
      summary: お知らせを既読にする
      description: 指定されたIDのお知らせを既読にします
      operationId: markNoticeAsRead
      security:
        - bearerAuth: []
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/ServerError'

  # 統計情報関連エンドポイント
  /books/{bookId}/statistics:
    parameters:
      - name: bookId
        in: path
        required: true
        description: スケジュール帳ID
        schema:
          type: integer
    
    get:
      tags:
        - statistics
      summary: 統計情報取得
      description: 指定されたスケジュール帳の統計情報を取得します
      operationId: getStatistics
      security:
        - bearerAuth: []
      parameters:
        - name: fromDate
          in: query
          description: 集計開始日
          schema:
            type: string
            format: date
        - name: toDate
          in: query
          description: 集計終了日
          schema:
            type: string
            format: date
      responses:
        '200':
          description: 統計情報取得成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatisticsResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/ServerError'

  # 職務経歴書関連エンドポイント
  /resume:
    get:
      tags:
        - resume
      summary: 職務経歴書取得
      description: ユーザーの職務経歴書を取得します
      operationId: getResume
      security:
        - bearerAuth: []
      responses:
        '200':
          description: 職務経歴書取得成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResumeResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/ServerError'

security:
  - bearerAuth: []
